name: 'Backend CI/CD'

on:
  workflow_dispatch:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/ie-bank-backend.yml'

env:
  BACKEND_WEBAPP_DEV: #Exercise IV: set the name of your web app
  IMAGE_NAME: #Exercise IV: set the name of container image
  REGISTRY_USERNAME: #Exercise IV: set the user name credentials of your container registry
  REGISTRY_PASSWORD: #Exercise IV: set the user name credentials of your container registry

jobs:
  build:
    
    runs-on: ubuntu-latest
    env:
      ENV: ghci

    steps:
      # Exercise IV
      # GitHub action: Write step to checkout code.
      - uses: actions/checkout@v4

      # Exercise IV
      # GitHub action: Write step to set up Python 3.11.
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Exercise IV
      # GitHub action: Write step to upgrade Python pip. Consider using the `working-directory: ./backend` setting
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

    
      # Exercise IV
      # GitHub action: Write step to install dependencies with pip. Consider using the `working-directory: ./backend` setting
      - name: Install dependencies
        run: pip install -r backend/requirements.txt

      # Exercise IV
      # GitHub action: Write step to install flake8 and pytest, and use flake8 to check code syntax. Consider using the `working-directory: ./backend` setting
      
      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Exercise IV
      # GitHub action: Write step to run python tests with pytest. Consider using the `working-directory: ./backend` setting

      - name: Run pytest
        run: |
          cd backend
          python -m pytest

      - name: Save Docker context as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-context
          path: .
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'

    steps:
      - name: Download Docker context artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-context

      # Exercise IV
      # GitHub action: Write step to login in to Azure.
      # You can use the repository secret AZURE_CREDENTIALS

       # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


    
      - name: Fetch secrets from Key Vault
        run: |
          DEV_ACR_USERNAME=$(az keyvault secret show --vault-name 'rmendez-kv' --name ACRusername --query value -o tsv)
          DEV_ACR_PASSWORD=$(az keyvault secret show --vault-name 'rmendez-kv' --name ACRpass0 --query value -o tsv)
          echo "DEV_ACR_USERNAME=${DEV_ACR_USERNAME}" >> $GITHUB_ENV
          echo "DEV_ACR_PASSWORD=${DEV_ACR_PASSWORD}" >> $GITHUB_ENV
        

      # Exercise IV
      # GitHub action: Write step to set up the published container image for your Azure container web app
      - name: Build and push Docker image to DEV ACR
        run: |
          cd backend
          docker build -t rmendezacr.azurecr.io/rmendez-backend:latest .
          docker login rmendezacr.azurecr.io -u $DEV_ACR_USERNAME -p $DEV_ACR_PASSWORD
          docker push rmendezacr.azurecr.io/rmendez-backend:latest